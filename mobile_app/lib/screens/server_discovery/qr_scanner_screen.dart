import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:mobile_scanner/mobile_scanner.dart';

import '../../blocs/network_discovery/network_discovery_bloc.dart';
import '../../blocs/network_discovery/network_discovery_event.dart';
import '../../utils/logger.dart';

/// Screen for scanning QR codes to connect to trading bot servers
class QrScannerScreen extends StatefulWidget {
  const QrScannerScreen({Key? key}) : super(key: key);

  @override
  State<QrScannerScreen> createState() => _QrScannerScreenState();
}

class _QrScannerScreenState extends State<QrScannerScreen> {
  static const String _logTag = 'QrScannerScreen';
  final Logger _logger = Logger(_logTag);
  
  MobileScannerController? _controller;
  bool _scanning = false;
  bool _hasPermission = false;
  bool _torchEnabled = false;
  
  @override
  void initState() {
    super.initState();
    _initializeScanner();
  }
  
  Future<void> _initializeScanner() async {
    try {
      // Create scanner controller with default values
      _controller = MobileScannerController(
        formats: const [BarcodeFormat.qrCode],
        detectionSpeed: DetectionSpeed.normal,
        facing: CameraFacing.back,
        torchEnabled: false,
      );
      
      setState(() {
        _scanning = true;
        _hasPermission = true;
      });
    } catch (e) {
      _logger.e('Error initializing QR scanner: $e');
      setState(() {
        _hasPermission = false;
        _scanning = false;
      });
    }
  }
  
  @override
  void dispose() {
    _controller?.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Scan QR Code'),
        actions: [
          if (_hasPermission && _scanning)
            IconButton(
              icon: Icon(_torchEnabled ? Icons.flash_off : Icons.flash_on),
              onPressed: _toggleTorch,
              tooltip: _torchEnabled ? 'Turn off flash' : 'Turn on flash',
            ),
        ],
      ),
      body: _buildBody(),
    );
  }
  
  Widget _buildBody() {
    if (!_hasPermission) {
      return _buildPermissionDeniedView();
    }
    
    if (!_scanning) {
      return _buildScannerErrorView();
    }
    
    return _buildScanner();
  }
  
  Widget _buildScanner() {
    return Stack(
      children: [
        MobileScanner(
          controller: _controller,
          onDetect: _onDetect,
          overlay: Container(
            decoration: BoxDecoration(
              border: Border.all(
                color: Colors.transparent,
                width: 0,
              ),
            ),
          ),
        ),
        _buildScanOverlay(),
        _buildInstructions(),
      ],
    );
  }
  
  Widget _buildScanOverlay() {
    return CustomPaint(
      size: Size.infinite,
      painter: ScannerOverlayPainter(),
    );
  }
  
  Widget _buildInstructions() {
    return Positioned(
      bottom: 40,
      left: 20,
      right: 20,
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.black.withOpacity(0.6),
          borderRadius: BorderRadius.circular(8),
        ),
        child: Column(
          children: [
            Text(
              'Point camera at QR code',
              style: Theme.of(context).textTheme.bodyLarge?.copyWith(
                color: Colors.white,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 8),
            Text(
              'The QR code should be generated by your PC trading bot application',
              style: Theme.of(context).textTheme.bodySmall?.copyWith(
                color: Colors.white.withOpacity(0.8),
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }
  
  Widget _buildPermissionDeniedView() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.camera_alt_off,
            size: 64,
            color: Theme.of(context).colorScheme.error,
          ),
          const SizedBox(height: 16),
          Text(
            'Camera Permission Required',
            style: Theme.of(context).textTheme.headlineSmall,
          ),
          const SizedBox(height: 8),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 32.0),
            child: Text(
              'To scan QR codes, please grant camera permission in your device settings',
              style: Theme.of(context).textTheme.bodyMedium,
              textAlign: TextAlign.center,
            ),
          ),
          const SizedBox(height: 24),
          ElevatedButton.icon(
            onPressed: _requestPermission,
            icon: const Icon(Icons.settings),
            label: const Text('Open Settings'),
          ),
        ],
      ),
    );
  }
  
  Widget _buildScannerErrorView() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.error_outline,
            size: 64,
            color: Theme.of(context).colorScheme.error,
          ),
          const SizedBox(height: 16),
          Text(
            'Scanner Error',
            style: Theme.of(context).textTheme.headlineSmall,
          ),
          const SizedBox(height: 8),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 32.0),
            child: Text(
              'There was an error initializing the QR code scanner',
              style: Theme.of(context).textTheme.bodyMedium,
              textAlign: TextAlign.center,
            ),
          ),
          const SizedBox(height: 24),
          ElevatedButton.icon(
            onPressed: _initializeScanner,
            icon: const Icon(Icons.refresh),
            label: const Text('Try Again'),
          ),
          const SizedBox(height: 16),
          TextButton.icon(
            onPressed: () => Navigator.of(context).pop(),
            icon: const Icon(Icons.arrow_back),
            label: const Text('Go Back'),
          ),
        ],
      ),
    );
  }
  
  Future<void> _requestPermission() async {
    // This would typically open app settings
    // For now, just try to reinitialize the scanner
    await _initializeScanner();
  }
  
  void _toggleTorch() {
    if (_controller != null) {
      _controller!.toggleTorch();
      setState(() {
        _torchEnabled = !_torchEnabled;
      });
    }
  }
  
  void _onDetect(BarcodeCapture capture) {
    final List<Barcode> barcodes = capture.barcodes;
    
    if (barcodes.isEmpty) {
      return;
    }
    
    // Only process the first QR code
    final qrCode = barcodes.first;
    final qrValue = qrCode.rawValue;
    
    if (qrValue == null || qrValue.isEmpty) {
      _logger.w('Detected QR code has no value');
      return;
    }
    
    _logger.i('Detected QR code: $qrValue');
    
    // Stop scanning after a successful detection
    setState(() {
      _scanning = false;
    });
    
    // Process the QR code data
    context.read<NetworkDiscoveryBloc>().add(ScanQrCodeEvent(qrValue));
    
    // Return to the previous screen
    Navigator.of(context).pop();
  }
}

/// Custom painter for the scanner overlay
class ScannerOverlayPainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    final double scanAreaSize = size.width * 0.7;
    final double scanAreaLeft = (size.width - scanAreaSize) / 2;
    final double scanAreaTop = (size.height - scanAreaSize) / 2;
    final double scanAreaRight = scanAreaLeft + scanAreaSize;
    final double scanAreaBottom = scanAreaTop + scanAreaSize;
    
    final Rect scanRect = Rect.fromLTRB(
      scanAreaLeft, 
      scanAreaTop, 
      scanAreaRight, 
      scanAreaBottom,
    );
    
    final Rect fullRect = Rect.fromLTWH(0, 0, size.width, size.height);
    
    // Paint semi-transparent background
    final Paint backgroundPaint = Paint()
      ..color = Colors.black.withOpacity(0.5)
      ..style = PaintingStyle.fill;
    
    // Paint for scanner area cutout
    final Paint cutoutPaint = Paint()
      ..color = Colors.transparent
      ..style = PaintingStyle.fill
      ..blendMode = BlendMode.clear;
    
    // Paint for scanner area border
    final Paint borderPaint = Paint()
      ..color = Colors.white
      ..style = PaintingStyle.stroke
      ..strokeWidth = 2.0;
    
    // Draw background with cutout
    canvas.saveLayer(fullRect, Paint());
    canvas.drawRect(fullRect, backgroundPaint);
    canvas.drawRect(scanRect, cutoutPaint);
    canvas.restore();
    
    // Draw scanner area border
    canvas.drawRect(scanRect, borderPaint);
    
    // Draw corner indicators
    _drawCornerIndicator(canvas, scanAreaLeft, scanAreaTop, scanAreaLeft + 30, scanAreaTop, scanAreaLeft, scanAreaTop + 30);
    _drawCornerIndicator(canvas, scanAreaRight - 30, scanAreaTop, scanAreaRight, scanAreaTop, scanAreaRight, scanAreaTop + 30);
    _drawCornerIndicator(canvas, scanAreaLeft, scanAreaBottom - 30, scanAreaLeft, scanAreaBottom, scanAreaLeft + 30, scanAreaBottom);
    _drawCornerIndicator(canvas, scanAreaRight - 30, scanAreaBottom, scanAreaRight, scanAreaBottom, scanAreaRight, scanAreaBottom - 30);
  }
  
  void _drawCornerIndicator(Canvas canvas, double x1, double y1, double x2, double y2, double x3, double y3) {
    final Paint cornerPaint = Paint()
      ..color = Colors.green
      ..style = PaintingStyle.stroke
      ..strokeWidth = 5.0;
    
    canvas.drawLine(Offset(x1, y1), Offset(x2, y2), cornerPaint);
    canvas.drawLine(Offset(x2, y2), Offset(x3, y3), cornerPaint);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) {
    return false;
  }
}
